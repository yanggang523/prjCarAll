
AVRASM ver. 2.1.30  C:\devGo\prjCarAll\Debug\List\prjCar.asm Sat Dec 14 11:34:45 2024

C:\devGo\prjCarAll\Debug\List\prjCar.asm(1419): warning: Register r5 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.49a Evaluation
                 ;(C) Copyright 1998-2022 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x68
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x80
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _ch=R5
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0087 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 00a5 	JMP  _timer1_compa_isr
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _msg_ready:
000046 4155
000047 5452
000048 4320
000049 6d6f      	.DB  0x55,0x41,0x52,0x54,0x20,0x43,0x6F,0x6D
00004a 756d
00004b 696e
00004c 6163
00004d 6974      	.DB  0x6D,0x75,0x6E,0x69,0x63,0x61,0x74,0x69
00004e 6e6f
00004f 5220
000050 6165
000051 7964      	.DB  0x6F,0x6E,0x20,0x52,0x65,0x61,0x64,0x79
000052 000a      	.DB  0xA,0x0
                 _msg_invalid:
000053 6e49
000054 6176
000055 696c
000056 2064      	.DB  0x49,0x6E,0x76,0x61,0x6C,0x69,0x64,0x20
000057 6f43
000058 6d6d
000059 6e61
00005a 0a64      	.DB  0x43,0x6F,0x6D,0x6D,0x61,0x6E,0x64,0xA
C:\devGo\prjCarAll\Debug\List\prjCar.asm(1472): warning: .cseg .db misalignment - padding zero byte
00005b 0000      	.DB  0x0
                 _msg_prompt:
00005c 7954
00005d 6570
00005e 6120
00005f 6d20      	.DB  0x54,0x79,0x70,0x65,0x20,0x61,0x20,0x6D
000060 7365
000061 6173
000062 6567
000063 203a      	.DB  0x65,0x73,0x73,0x61,0x67,0x65,0x3A,0x20
C:\devGo\prjCarAll\Debug\List\prjCar.asm(1476): warning: .cseg .db misalignment - padding zero byte
000064 0000      	.DB  0x0
                 _msg_hello:
000065 654d
000066 7373
000067 6761
000068 2065      	.DB  0x4D,0x65,0x73,0x73,0x61,0x67,0x65,0x20
000069 6552
00006a 6563
00006b 7669
00006c 6465      	.DB  0x52,0x65,0x63,0x65,0x69,0x76,0x65,0x64
00006d 203a
00006e 4548
00006f 4c4c
000070 0a4f      	.DB  0x3A,0x20,0x48,0x45,0x4C,0x4C,0x4F,0xA
C:\devGo\prjCarAll\Debug\List\prjCar.asm(1481): warning: .cseg .db misalignment - padding zero byte
000071 0000      	.DB  0x0
                 _msg_unknown:
000072 6e55
000073 6e6b
000074 776f
000075 206e      	.DB  0x55,0x6E,0x6B,0x6E,0x6F,0x77,0x6E,0x20
000076 654d
000077 7373
000078 6761
000079 0a65      	.DB  0x4D,0x65,0x73,0x73,0x61,0x67,0x65,0xA
C:\devGo\prjCarAll\Debug\List\prjCar.asm(1485): warning: .cseg .db misalignment - padding zero byte
00007a 0000      	.DB  0x0
                 _msg_hello_flash:
00007b 4548
00007c 4c4c
00007d 004f      	.DB  0x48,0x45,0x4C,0x4C,0x4F,0x0
                 _tbl10_G100:
00007e 2710
00007f 03e8
000080 0064
000081 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000082 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000083 1000
000084 0100
000085 0010
000086 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 __RESET:
000087 94f8      	CLI
000088 27ee      	CLR  R30
000089 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00008a e0f1      	LDI  R31,1
00008b bff5      	OUT  MCUCR,R31
00008c bfe5      	OUT  MCUCR,R30
00008d 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
00008f e08d      	LDI  R24,(14-2)+1
000090 e0a2      	LDI  R26,2
000091 27bb      	CLR  R27
                 __CLEAR_REG:
000092 93ed      	ST   X+,R30
000093 958a      	DEC  R24
000094 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000095 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000096 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000097 e0a0      	LDI  R26,LOW(__SRAM_START)
000098 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000099 93ed      	ST   X+,R30
00009a 9701      	SBIW R24,1
00009b f7e9      	BRNE __CLEAR_SRAM
                 
00009c bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00009d efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00009e bfed      	OUT  SPL,R30
00009f e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000a0 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000a1 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a2 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000a3 940c 0123 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;void timer0_init(void);
                 ;void timer2_init(void);
                 ;void USART0_Init(unsigned int ubrr);
                 ;char USART0_Receive(void);
                 ;void USART0_Transmit(char data);
                 ;void USART0_ReceiveString(char *buffer, int maxLength);
                 ;void USART0_SendFlashString(const flash char *str);
                 ;void Go_Straight(void);
                 ;void Turn_Left(void);
                 ;void Turn_Right(void);
                 ;void Back(void);
                 ;void Stop(void);
                 ;interrupt [13] void timer1_compa_isr(void) {
                 ; 0000 0036 interrupt [13] void timer1_compa_isr(void) {
                 
                 	.CSEG
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
0000a5 93aa      	ST   -Y,R26
0000a6 93ba      	ST   -Y,R27
0000a7 93ea      	ST   -Y,R30
0000a8 93fa      	ST   -Y,R31
0000a9 b7ef      	IN   R30,SREG
0000aa 93ea      	ST   -Y,R30
                 ; 0000 0037 total_count++;
0000ab e0a0      	LDI  R26,LOW(_total_count)
0000ac e0b5      	LDI  R27,HIGH(_total_count)
0000ad 91ed      	LD   R30,X+
0000ae 91fd      	LD   R31,X+
0000af 9631      	ADIW R30,1
0000b0 93fe      	ST   -X,R31
0000b1 93ee      	ST   -X,R30
                 ; 0000 0038 }
0000b2 91e9      	LD   R30,Y+
0000b3 bfef      	OUT  SREG,R30
0000b4 91f9      	LD   R31,Y+
0000b5 91e9      	LD   R30,Y+
0000b6 91b9      	LD   R27,Y+
0000b7 91a9      	LD   R26,Y+
0000b8 9518      	RETI
                 ; .FEND
                 ;void USART0_Init(unsigned int ubrr) {
                 ; 0000 0043 void USART0_Init(unsigned int ubrr) {
                 _USART0_Init:
                 ; .FSTART _USART0_Init
                 ; 0000 0044 UBRR0H = (unsigned char)(ubrr >> 8);
0000b9 931a      	ST   -Y,R17
0000ba 930a      	ST   -Y,R16
0000bb 018d      	MOVW R16,R26
                 ;	ubrr -> R16,R17
0000bc 9310 0090 	STS  144,R17
                 ; 0000 0045 UBRR0L = (unsigned char)ubrr;
0000be b909      	OUT  0x9,R16
                 ; 0000 0046 UCSR0B = (1 << RXEN0) | (1 << TXEN0);
0000bf e1e8      	LDI  R30,LOW(24)
0000c0 b9ea      	OUT  0xA,R30
                 ; 0000 0047 UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
0000c1 e0e6      	LDI  R30,LOW(6)
0000c2 93e0 0095 	STS  149,R30
                 ; 0000 0048 }
0000c4 9109      	LD   R16,Y+
0000c5 9119      	LD   R17,Y+
0000c6 9508      	RET
                 ; .FEND
                 ;char USART0_Receive(void) {
                 ; 0000 004B char USART0_Receive(void) {
                 _USART0_Receive:
                 ; .FSTART _USART0_Receive
                 ; 0000 004C while (!(UCSR0A & (1 << RXC0)));
                 _0x3:
0000c7 9b5f      	SBIS 0xB,7
0000c8 cffe      	RJMP _0x3
                 ; 0000 004D return UDR0;
0000c9 b1ec      	IN   R30,0xC
0000ca 9508      	RET
                 ; 0000 004E }
                 ; .FEND
                 ;void USART0_Transmit(char data) {
                 ; 0000 0051 void USART0_Transmit(char data) {
                 _USART0_Transmit:
                 ; .FSTART _USART0_Transmit
                 ; 0000 0052 while (!(UCSR0A & (1 << UDRE0)));
0000cb 931a      	ST   -Y,R17
0000cc 2f1a      	MOV  R17,R26
                 ;	data -> R17
                 _0x6:
0000cd 9b5d      	SBIS 0xB,5
0000ce cffe      	RJMP _0x6
                 ; 0000 0053 UDR0 = data;
0000cf b91c      	OUT  0xC,R17
                 ; 0000 0054 }
0000d0 9119      	LD   R17,Y+
0000d1 9508      	RET
                 ; .FEND
                 ;void USART0_SendFlashString(const flash char *str) {
                 ; 0000 0057 void USART0_SendFlashString(const flash char *str) {
                 _USART0_SendFlashString:
                 ; .FSTART _USART0_SendFlashString
                 ; 0000 0058 char c;
                 ; 0000 0059 while ((c = *str++)!= '\0') {
0000d2 d0cf      	RCALL __SAVELOCR4
0000d3 019d      	MOVW R18,R26
                 ;	*str -> R18,R19
                 ;	c -> R17
                 _0x9:
0000d4 01f9      	MOVW R30,R18
                +
0000d5 5f2f     +SUBI R18 , LOW ( - 1 )
0000d6 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0000d7 91e4      	LPM  R30,Z
0000d8 2f1e      	MOV  R17,R30
0000d9 30e0      	CPI  R30,0
0000da f019      	BREQ _0xB
                 ; 0000 005A USART0_Transmit(c);
0000db 2fa1      	MOV  R26,R17
0000dc dfee      	RCALL _USART0_Transmit
                 ; 0000 005B }
0000dd cff6      	RJMP _0x9
                 _0xB:
                 ; 0000 005C }
0000de d0ca      	RCALL __LOADLOCR4
0000df 9624      	ADIW R28,4
0000e0 9508      	RET
                 ; .FEND
                 ;void USART0_ReceiveString(char *buffer, int maxLength) {
                 ; 0000 005F void USART0_ReceiveString(char *buffer, int maxLength) {
                 _USART0_ReceiveString:
                 ; .FSTART _USART0_ReceiveString
                 ; 0000 0060 int i = 0;
                 ; 0000 0061 char ch;
                 ; 0000 0062 
                 ; 0000 0063 while (1) {
0000e1 d0be      	RCALL __SAVELOCR6
0000e2 01ad      	MOVW R20,R26
                 ;	*buffer -> Y+6
                 ;	maxLength -> R20,R21
                 ;	i -> R16,R17
                 ;	ch -> R19
                +
0000e3 e000     +LDI R16 , LOW ( 0 )
0000e4 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xC:
                 ; 0000 0064 ch = USART0_Receive();
0000e5 dfe1      	RCALL _USART0_Receive
0000e6 2f3e      	MOV  R19,R30
                 ; 0000 0065 
                 ; 0000 0066 if (ch == '\r' || ch == '\n') {
0000e7 303d      	CPI  R19,13
0000e8 f011      	BREQ _0x10
0000e9 303a      	CPI  R19,10
0000ea f439      	BRNE _0xF
                 _0x10:
                 ; 0000 0067 buffer[i] = '\0';
0000eb 81ae      	LDD  R26,Y+6
0000ec 81bf      	LDD  R27,Y+6+1
0000ed 0fa0      	ADD  R26,R16
0000ee 1fb1      	ADC  R27,R17
0000ef e0e0      	LDI  R30,LOW(0)
0000f0 93ec      	ST   X,R30
                 ; 0000 0068 break;
0000f1 c00e      	RJMP _0xE
                 ; 0000 0069 }
                 ; 0000 006A 
                 ; 0000 006B if (i < maxLength - 1) {
                 _0xF:
0000f2 01fa      	MOVW R30,R20
0000f3 9731      	SBIW R30,1
0000f4 170e      	CP   R16,R30
0000f5 071f      	CPC  R17,R31
0000f6 f444      	BRGE _0x12
                 ; 0000 006C buffer[i++] = ch;
0000f7 01f8      	MOVW R30,R16
                +
0000f8 5f0f     +SUBI R16 , LOW ( - 1 )
0000f9 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000fa 81ae      	LDD  R26,Y+6
0000fb 81bf      	LDD  R27,Y+6+1
0000fc 0fea      	ADD  R30,R26
0000fd 1ffb      	ADC  R31,R27
0000fe 8330      	ST   Z,R19
                 ; 0000 006D }
                 ; 0000 006E }
                 _0x12:
0000ff cfe5      	RJMP _0xC
                 _0xE:
                 ; 0000 006F }
000100 d0a6      	RCALL __LOADLOCR6
000101 9628      	ADIW R28,8
000102 9508      	RET
                 ; .FEND
                 ;void timer0_init(void) {
                 ; 0000 0072 void timer0_init(void) {
                 _timer0_init:
                 ; .FSTART _timer0_init
                 ; 0000 0073 TCCR0 = 0b01101100;  // Fast PWM 모드 설정
000103 e6ec      	LDI  R30,LOW(108)
000104 bfe3      	OUT  0x33,R30
                 ; 0000 0074 }
000105 9508      	RET
                 ; .FEND
                 ;void timer2_init(void) {
                 ; 0000 0077 void timer2_init(void) {
                 _timer2_init:
                 ; .FSTART _timer2_init
                 ; 0000 0078 TCCR2 = 0b01101011;  // Fast PWM 모드 설정
000106 e6eb      	LDI  R30,LOW(107)
000107 bde5      	OUT  0x25,R30
                 ; 0000 0079 }
000108 9508      	RET
                 ; .FEND
                 ;void Go_Straight(void) {
                 ; 0000 007C void Go_Straight(void) {
                 _Go_Straight:
                 ; .FSTART _Go_Straight
                 ; 0000 007D OCR0 = 90;
000109 d087      	RCALL SUBOPT_0x0
                 ; 0000 007E PORTB &= ~(1 << 5);
                 ; 0000 007F PORTB |= (1 << 6);
                 ; 0000 0080 
                 ; 0000 0081 OCR2 = 90;
00010a c006      	RJMP _0x2060002
                 ; 0000 0082 PORTB &= ~(1 << 2);
                 ; 0000 0083 PORTB |= (1 << 3);
                 ; 0000 0084 }
                 ; .FEND
                 ;void Back(void) {
                 ; 0000 0087 void Back(void) {
                 _Back:
                 ; .FSTART _Back
                 ; 0000 0088 OCR0 = 90;
00010b d08a      	RCALL SUBOPT_0x1
                 ; 0000 0089 PORTB |= (1 << 5);
                 ; 0000 008A PORTB &= ~(1 << 6);
                 ; 0000 008B 
                 ; 0000 008C OCR2 = 90;
00010c e5ea      	LDI  R30,LOW(90)
00010d bde3      	OUT  0x23,R30
                 ; 0000 008D PORTB |= (1 << 2);
00010e 9ac2      	SBI  0x18,2
                 ; 0000 008E PORTB &= ~(1 << 3);
00010f c011      	RJMP _0x2060001
                 ; 0000 008F }
                 ; .FEND
                 ;void Turn_Right(void) {
                 ; 0000 0092 void Turn_Right(void) {
                 _Turn_Right:
                 ; .FSTART _Turn_Right
                 ; 0000 0093 OCR0 = 90;
000110 d085      	RCALL SUBOPT_0x1
                 ; 0000 0094 PORTB |= (1 << 5);
                 ; 0000 0095 PORTB &= ~(1 << 6);
                 ; 0000 0096 
                 ; 0000 0097 OCR2 = 90;
                 _0x2060002:
000111 e5ea      	LDI  R30,LOW(90)
000112 bde3      	OUT  0x23,R30
                 ; 0000 0098 PORTB &= ~(1 << 2);
000113 98c2      	CBI  0x18,2
                 ; 0000 0099 PORTB |= (1 << 3);
000114 9ac3      	SBI  0x18,3
                 ; 0000 009A }
000115 9508      	RET
                 ; .FEND
                 ;void Turn_Left(void) {
                 ; 0000 009D void Turn_Left(void) {
                 _Turn_Left:
                 ; .FSTART _Turn_Left
                 ; 0000 009E OCR0 = 90;
000116 d07a      	RCALL SUBOPT_0x0
                 ; 0000 009F PORTB &= ~(1 << 5);
                 ; 0000 00A0 PORTB |= (1 << 6);
                 ; 0000 00A1 
                 ; 0000 00A2 OCR2 = 90;
000117 e5ea      	LDI  R30,LOW(90)
000118 bde3      	OUT  0x23,R30
                 ; 0000 00A3 PORTB |= (1 << 2);
000119 9ac2      	SBI  0x18,2
                 ; 0000 00A4 PORTB &= ~(1 << 3);
00011a c006      	RJMP _0x2060001
                 ; 0000 00A5 }
                 ; .FEND
                 ;void Stop(void) {
                 ; 0000 00A8 void Stop(void) {
                 _Stop:
                 ; .FSTART _Stop
                 ; 0000 00A9 OCR0 = 0;
00011b e0e0      	LDI  R30,LOW(0)
00011c bfe1      	OUT  0x31,R30
                 ; 0000 00AA PORTB &= ~(1 << 5);
00011d 98c5      	CBI  0x18,5
                 ; 0000 00AB PORTB &= ~(1 << 6);
00011e 98c6      	CBI  0x18,6
                 ; 0000 00AC 
                 ; 0000 00AD OCR2 = 0;
00011f bde3      	OUT  0x23,R30
                 ; 0000 00AE PORTB &= ~(1 << 2);
000120 98c2      	CBI  0x18,2
                 ; 0000 00AF PORTB &= ~(1 << 3);
                 _0x2060001:
000121 98c3      	CBI  0x18,3
                 ; 0000 00B0 }
000122 9508      	RET
                 ; .FEND
                 ;void main(void) {
                 ; 0000 00B3 void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 00B4 DDRB = 0xFF;      // PORTB를 출력으로 설정
000123 efef      	LDI  R30,LOW(255)
000124 bbe7      	OUT  0x17,R30
                 ; 0000 00B5 timer0_init();    // 타이머0 초기화
000125 dfdd      	RCALL _timer0_init
                 ; 0000 00B6 timer2_init();    // 타이머2 초기화
000126 dfdf      	RCALL _timer2_init
                 ; 0000 00B7 USART0_Init(MYUBRR);  // USART0 초기화
000127 ecaf      	LDI  R26,LOW(207)
000128 e0b0      	LDI  R27,0
000129 df8f      	RCALL _USART0_Init
                 ; 0000 00B8 
                 ; 0000 00B9 #asm("sei")  // 전역 인터럽트 활성화
00012a 9478      	SEI
                 ; 0000 00BA 
                 ; 0000 00BB while (1) {
                 _0x13:
                 ; 0000 00BC // 리셋 메시지 출력
                 ; 0000 00BD USART0_SendFlashString(msg_ready);
00012b e8ac      	LDI  R26,LOW(_msg_ready*2)
00012c e0b0      	LDI  R27,HIGH(_msg_ready*2)
00012d dfa4      	RCALL _USART0_SendFlashString
                 ; 0000 00BE 
                 ; 0000 00BF // 단일 문자 수신 및 처리
                 ; 0000 00C0 if (UCSR0A & (1 << RXC0)) {
00012e 9b5f      	SBIS 0xB,7
00012f c038      	RJMP _0x16
                 ; 0000 00C1 ch = USART0_Receive();
000130 df96      	RCALL _USART0_Receive
000131 2e5e      	MOV  R5,R30
                 ; 0000 00C2 
                 ; 0000 00C3 switch (ch) {
000132 e0f0      	LDI  R31,0
                 ; 0000 00C4 case 'W':
000133 35e7      	CPI  R30,LOW(0x57)
000134 e0a0      	LDI  R26,HIGH(0x57)
000135 07fa      	CPC  R31,R26
000136 f021      	BREQ _0x1B
                 ; 0000 00C5 case 'w':
000137 37e7      	CPI  R30,LOW(0x77)
000138 e0a0      	LDI  R26,HIGH(0x77)
000139 07fa      	CPC  R31,R26
00013a f411      	BRNE _0x1C
                 _0x1B:
                 ; 0000 00C6 Go_Straight();
00013b dfcd      	RCALL _Go_Straight
                 ; 0000 00C7 break;
00013c c02b      	RJMP _0x19
                 ; 0000 00C8 case 'S':
                 _0x1C:
00013d 35e3      	CPI  R30,LOW(0x53)
00013e e0a0      	LDI  R26,HIGH(0x53)
00013f 07fa      	CPC  R31,R26
000140 f021      	BREQ _0x1E
                 ; 0000 00C9 case 's':
000141 37e3      	CPI  R30,LOW(0x73)
000142 e0a0      	LDI  R26,HIGH(0x73)
000143 07fa      	CPC  R31,R26
000144 f411      	BRNE _0x1F
                 _0x1E:
                 ; 0000 00CA Back();
000145 dfc5      	RCALL _Back
                 ; 0000 00CB break;
000146 c021      	RJMP _0x19
                 ; 0000 00CC case 'A':
                 _0x1F:
000147 34e1      	CPI  R30,LOW(0x41)
000148 e0a0      	LDI  R26,HIGH(0x41)
000149 07fa      	CPC  R31,R26
00014a f021      	BREQ _0x21
                 ; 0000 00CD case 'a':
00014b 36e1      	CPI  R30,LOW(0x61)
00014c e0a0      	LDI  R26,HIGH(0x61)
00014d 07fa      	CPC  R31,R26
00014e f411      	BRNE _0x22
                 _0x21:
                 ; 0000 00CE Turn_Left();
00014f dfc6      	RCALL _Turn_Left
                 ; 0000 00CF break;
000150 c017      	RJMP _0x19
                 ; 0000 00D0 case 'D':
                 _0x22:
000151 34e4      	CPI  R30,LOW(0x44)
000152 e0a0      	LDI  R26,HIGH(0x44)
000153 07fa      	CPC  R31,R26
000154 f021      	BREQ _0x24
                 ; 0000 00D1 case 'd':
000155 36e4      	CPI  R30,LOW(0x64)
000156 e0a0      	LDI  R26,HIGH(0x64)
000157 07fa      	CPC  R31,R26
000158 f411      	BRNE _0x25
                 _0x24:
                 ; 0000 00D2 Turn_Right();
000159 dfb6      	RCALL _Turn_Right
                 ; 0000 00D3 break;
00015a c00d      	RJMP _0x19
                 ; 0000 00D4 case 'R':
                 _0x25:
00015b 35e2      	CPI  R30,LOW(0x52)
00015c e0a0      	LDI  R26,HIGH(0x52)
00015d 07fa      	CPC  R31,R26
00015e f021      	BREQ _0x27
                 ; 0000 00D5 case 'r':
00015f 37e2      	CPI  R30,LOW(0x72)
000160 e0a0      	LDI  R26,HIGH(0x72)
000161 07fa      	CPC  R31,R26
000162 f411      	BRNE _0x29
                 _0x27:
                 ; 0000 00D6 Stop();
000163 dfb7      	RCALL _Stop
                 ; 0000 00D7 break;
000164 c003      	RJMP _0x19
                 ; 0000 00D8 default:
                 _0x29:
                 ; 0000 00D9 USART0_SendFlashString(msg_invalid);
000165 eaa6      	LDI  R26,LOW(_msg_invalid*2)
000166 e0b0      	LDI  R27,HIGH(_msg_invalid*2)
000167 df6a      	RCALL _USART0_SendFlashString
                 ; 0000 00DA break;
                 ; 0000 00DB }
                 _0x19:
                 ; 0000 00DC }
                 ; 0000 00DD 
                 ; 0000 00DE // 문자열 수신 및 "HELLO" 확인
                 ; 0000 00DF USART0_SendFlashString(msg_prompt);
                 _0x16:
000168 eba8      	LDI  R26,LOW(_msg_prompt*2)
000169 e0b0      	LDI  R27,HIGH(_msg_prompt*2)
00016a df67      	RCALL _USART0_SendFlashString
                 ; 0000 00E0 USART0_ReceiveString(receivedString, sizeof(receivedString));
00016b d02f      	RCALL SUBOPT_0x2
00016c e1a4      	LDI  R26,LOW(20)
00016d e0b0      	LDI  R27,0
00016e df72      	RCALL _USART0_ReceiveString
                 ; 0000 00E1 
                 ; 0000 00E2 if (strcmp_P(receivedString, msg_hello_flash) == 0) {
00016f d02b      	RCALL SUBOPT_0x2
000170 efa6      	LDI  R26,LOW(_msg_hello_flash*2)
000171 e0b0      	LDI  R27,HIGH(_msg_hello_flash*2)
000172 d00a      	RCALL _strcmpf
000173 30e0      	CPI  R30,0
000174 f419      	BRNE _0x2A
                 ; 0000 00E3 USART0_SendFlashString(msg_hello);
000175 ecaa      	LDI  R26,LOW(_msg_hello*2)
000176 e0b0      	LDI  R27,HIGH(_msg_hello*2)
000177 c002      	RJMP _0x2D
                 ; 0000 00E4 } else {
                 _0x2A:
                 ; 0000 00E5 USART0_SendFlashString(msg_unknown);
000178 eea4      	LDI  R26,LOW(_msg_unknown*2)
000179 e0b0      	LDI  R27,HIGH(_msg_unknown*2)
                 _0x2D:
00017a df57      	RCALL _USART0_SendFlashString
                 ; 0000 00E6 }
                 ; 0000 00E7 }
00017b cfaf      	RJMP _0x13
                 ; 0000 00E8 }
                 _0x2C:
00017c cfff      	RJMP _0x2C
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcmpf:
                 ; .FSTART _strcmpf
00017d 93ba      	ST   -Y,R27
00017e 93aa      	ST   -Y,R26
00017f 91e9          ld   r30,y+
000180 91f9          ld   r31,y+
000181 91a9          ld   r26,y+
000182 91b9          ld   r27,y+
                 strcmpf0:
000183 901d          ld   r1,x+
000184 9005      	lpm  r0,z+
000185 1401          cp   r0,r1
000186 f421          brne strcmpf1
000187 2000          tst  r0
000188 f7d1          brne strcmpf0
                 strcmpf3:
000189 27ee          clr  r30
00018a 9508          ret
                 strcmpf1:
00018b 1810          sub  r1,r0
00018c f3e1          breq strcmpf3
00018d e0e1          ldi  r30,1
00018e f408          brcc strcmpf2
00018f 50e2          subi r30,2
                 strcmpf2:
000190 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _total_count:
000500           	.BYTE 0x2
                 _receivedString:
000502           	.BYTE 0x14
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000191 e5ea      	LDI  R30,LOW(90)
000192 bfe1      	OUT  0x31,R30
000193 98c5      	CBI  0x18,5
000194 9ac6      	SBI  0x18,6
000195 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000196 e5ea      	LDI  R30,LOW(90)
000197 bfe1      	OUT  0x31,R30
000198 9ac5      	SBI  0x18,5
000199 98c6      	CBI  0x18,6
00019a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00019b e0e2      	LDI  R30,LOW(_receivedString)
00019c e0f5      	LDI  R31,HIGH(_receivedString)
00019d 93fa      	ST   -Y,R31
00019e 93ea      	ST   -Y,R30
00019f 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0001a0 935a      	ST   -Y,R21
                 __SAVELOCR5:
0001a1 934a      	ST   -Y,R20
                 __SAVELOCR4:
0001a2 933a      	ST   -Y,R19
                 __SAVELOCR3:
0001a3 932a      	ST   -Y,R18
                 __SAVELOCR2:
0001a4 931a      	ST   -Y,R17
0001a5 930a      	ST   -Y,R16
0001a6 9508      	RET
                 
                 __LOADLOCR6:
0001a7 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0001a8 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0001a9 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0001aa 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0001ab 8119      	LDD  R17,Y+1
0001ac 8108      	LD   R16,Y
0001ad 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :   4 r1 :   3 r2 :   0 r3 :   0 r4 :   0 r5 :   1 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  11 r17:  15 r18:   5 r19:   7 r20:   4 r21:   2 r22:   0 r23:   0 
r24:   5 r25:   1 r26:  44 r27:  19 r28:   3 r29:   1 r30:  73 r31:  22 
x  :   8 y  :  40 z  :   3 
Registers used: 20 out of 35 (57.1%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   2 
adiw  :   3 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   8 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  11 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   7 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   3 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   2 cpc   :  11 cpi   :  14 cpse  :   0 dec   :   1 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   2 inc   :   0 jmp   :  36 ld    :  16 ldd   :   9 
ldi   :  57 lds   :   0 lpm   :   3 lsl   :   0 lsr   :   0 mov   :   5 
movw  :   6 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   0 ori   :   0 out   :  20 pop   :   0 push  :   0 rcall :  27 
ret   :  16 reti  :   1 rjmp  :  17 rol   :   0 ror   :   0 sbc   :   0 
sbci  :   2 sbi   :   5 sbic  :   0 sbis  :   3 sbiw  :   2 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  24 std   :   0 sts   :   3 sub   :   1 subi  :   3 
swap  :   0 tst   :   1 wdr   :   0 
Instructions used: 37 out of 117 (31.6%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00035c    730    130    860  131072   0.7%
[.dseg] 0x000100 0x000516      0     22     22    4096   0.5%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 5 warnings
